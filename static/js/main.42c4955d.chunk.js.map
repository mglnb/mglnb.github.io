{"version":3,"sources":["components/Name.js","components/Container.js","components/Options.js","App.js","serviceWorker.js","index.js"],"names":["SVGKeyframes","keyframes","_templateObject","SVG","styled","svg","_templateObject2","SVGLines","_templateObject3","BorderName","rect","_templateObject4","TextName","text","_templateObject5","dashArray","_templateObject6","G2Line1","line","_templateObject7","delay","G2Line2","_templateObject8","G1Line","_templateObject9","Name","react_default","a","createElement","Fragment","xmlns","viewBox","preserveAspectRatio","height","width","y","x","xmlSpace","text-anchor","x1","y1","x2","y2","id","stdDeviation","BackgroundAnimation","Container_templateObject","Container","div","Container_templateObject2","OptionsGrid","Options_templateObject","Button","button","Options_templateObject2","Options","App","components_Container","components_Name","components_Options","Component","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","src_templateObject","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gmEAIA,IAGMA,EAAeC,YAAHC,KAkBZC,EAAMC,IAAOC,IAAVC,IAOQN,EA5BH,SAgCRO,EAAWH,IAAOC,IAAVG,KAORC,EAAaL,IAAOM,KAAVC,KAMVC,EAAWR,IAAOS,KAAVC,KAKRC,EAAYd,YAAHe,KAQTC,EAAUb,IAAOc,KAAVC,IAGIJ,EAA0BK,KAMrCC,EAAUjB,IAAOc,KAAVI,IAGIP,EAA0BK,KAMrCG,EAASnB,IAAOc,KAAVM,IAGKT,EAAyBK,KAiC3BK,EA5BF,kBACTC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACzB,EAAD,CAAK2B,MAAM,6BAA6BC,QAAQ,cAAcC,oBAAoB,iBAC9EN,EAAAC,EAAAC,cAACnB,EAAD,CAAYwB,OAAO,MAAMC,MAAM,MAAMC,EAAE,IAAIC,EAAE,SAC7CV,EAAAC,EAAAC,cAAChB,EAAD,CAAUyB,SAAS,WAAWC,cAAY,QAAQH,EAAE,QAAQC,EAAE,aAA9D,UACAV,EAAAC,EAAAC,cAAChB,EAAD,CAAUyB,SAAS,WAAWC,cAAY,QAAQH,EAAE,QAAQC,EAAE,aAA9D,WAEJV,EAAAC,EAAAC,cAACrB,EAAD,CAAUyB,oBAAoB,gBAAgBD,QAAQ,eAClDL,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACL,EAAD,CAAQgB,GAAG,YAAYC,GAAG,WAAWC,GAAG,YAAYC,GAAG,eAE3DhB,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACX,EAAD,CAASsB,GAAG,YAAYC,GAAG,YAAYC,GAAG,YAAYC,GAAG,cACzDhB,EAAAC,EAAAC,cAACP,EAAD,CAASkB,GAAG,MAAMC,GAAG,YAAYC,GAAG,MAAMC,GAAG,eAEjDhB,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACX,EAAD,CAASsB,GAAG,YAAYC,GAAG,YAAYC,GAAG,YAAYC,GAAG,cACzDhB,EAAAC,EAAAC,cAACP,EAAD,CAASkB,GAAG,YAAYC,GAAG,MAAMC,GAAG,YAAYC,GAAG,gBAG3DhB,EAAAC,EAAAC,cAAA,OAAKK,OAAO,IAAIC,MAAM,KAClBR,EAAAC,EAAAC,cAAA,UAAQe,GAAG,QACPjB,EAAAC,EAAAC,cAAA,kBAAgBgB,aAAa,8mBC3G7C,IAAMC,EAAsB5C,YAAH6C,KA2BVC,EAbG3C,IAAO4C,IAAVC,IAUEJ,+2BCxBjB,IAAMK,EAAc9C,IAAO4C,IAAVG,KAUXC,EAAShD,IAAOiD,OAAVC,KAoCGC,EARC,kBACZ7B,EAAAC,EAAAC,cAACsB,EAAD,KACIxB,EAAAC,EAAAC,cAACwB,EAAD,uBACA1B,EAAAC,EAAAC,cAACwB,EAAD,kBACA1B,EAAAC,EAAAC,cAACwB,EAAD,uBC1BOI,mLATX,OACE9B,EAAAC,EAAAC,cAAC6B,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,cALUC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sQCZN,IAAMC,EAAcC,YAAHC,KAQjBC,IAASC,OACL5C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAAC2C,EAAD,OAENC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42c4955d.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\n\r\nconst delay = 1.5;\r\n\r\n\r\nconst SVGKeyframes = keyframes`\r\n    25% {\r\n        transform: scale(1);\r\n        opacity: .9;\r\n    }\r\n    60% {\r\n        transform: scale(1);\r\n        opacity: .9;\r\n        margin-bottom: -5vh;\r\n \r\n    }\r\n    100% {\r\n        transform: scale(1) translateY(-10vh);\r\n        margin-bottom: -10vh;\r\n        opacity: .9;\r\n    }\r\n`\r\n\r\nconst SVG = styled.svg`\r\n    stroke-linejoin: round;\r\n    opacity: 0;\r\n    mix-blend-mode: overlay;\r\n    filter: brightness(120%);\r\n    transform: scale(2);\r\n    transform-origin: top center;\r\n    animation: ${SVGKeyframes} ${delay}s forwards ${delay}s;\r\n    margin: 0 20%;\r\n    max-width: 600px;\r\n`\r\nconst SVGLines = styled.svg`\r\n    stroke-linejoin: round;\r\n    opacity: .9;\r\n    mix-blend-mode: overlay;\r\n    filter: brightness(120%);\r\n    max-width: 1050px;\r\n`\r\nconst BorderName = styled.rect`\r\n    stroke: #FFF;\r\n    stroke-width: 3px;\r\n    fill: transparent;\r\n`\r\n\r\nconst TextName = styled.text`\r\n    font-size: 122px;\r\n    fill: #FFF;\r\n    font-weight: 100;    \r\n`\r\nconst dashArray = keyframes`\r\n    to {\r\n        stroke-dashoffset: 0;\r\n    }\r\n`\r\n\r\n\r\n\r\nconst G2Line1 = styled.line`\r\n    stroke-dasharray: 390;\r\n    stroke-dashoffset: 390;\r\n    animation: ${dashArray} .8s forwards ${delay + delay + .7}s ease;\r\n    stroke-width: 2;\r\n    stroke: #FFF;\r\n\r\n`\r\n\r\nconst G2Line2 = styled.line`\r\n    stroke-dasharray: 72;\r\n    stroke-dashoffset: 72;\r\n    animation: ${dashArray} .3s forwards ${delay + delay + 1.5}s ease;\r\n    stroke-width: 2;\r\n    stroke: #FFF;\r\n\r\n`\r\n\r\nconst G1Line = styled.line`\r\n    stroke-dasharray: 230;\r\n    stroke-dashoffset: 230;\r\n    animation: ${dashArray} 1s forwards ${delay + delay + .2}s ease;\r\n    stroke-width: 2;\r\n    stroke: #FFF;\r\n`\r\n\r\nconst Name = () => (\r\n    <>\r\n        <SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 800 303\" preserveAspectRatio=\"xMidYMid meet\">\r\n            <BorderName height=\"294\" width=\"793\" y=\"8\" x=\"5.49\" />\r\n            <TextName xmlSpace=\"preserve\" text-anchor=\"start\" y=\"132.5\" x=\"175.14063\">MIGUEL</TextName>\r\n            <TextName xmlSpace=\"preserve\" text-anchor=\"start\" y=\"257.5\" x=\"153.60938\">NOVACK</TextName>\r\n        </SVG>\r\n        <SVGLines preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 998 220\">\r\n            <g>\r\n                <G1Line x1=\"497.38435\" y1=\"-1.48784\" x2=\"497.38435\" y2=\"228.04401\" />\r\n            </g>\r\n            <g>\r\n                <G2Line1 x1=\"499.59893\" y1=\"157.53653\" x2=\"113.72387\" y2=\"157.53653\" />\r\n                <G2Line2 x1=\"115\" y1=\"157.56092\" x2=\"115\" y2=\"226.83869\" />\r\n            </g>\r\n            <g>\r\n                <G2Line1 x1=\"494.66997\" y1=\"157.53653\" x2=\"880.42898\" y2=\"157.53653\" />\r\n                <G2Line2 x1=\"880.20164\" y1=\"156\" x2=\"880.20164\" y2=\"226.83869\" />\r\n            </g>\r\n        </SVGLines>\r\n        <svg height=\"0\" width=\"0\">\r\n            <filter id=\"blur\">\r\n                <feGaussianBlur stdDeviation=\"5\" />\r\n            </filter>\r\n        </svg>\r\n    </>\r\n)\r\n\r\nexport default Name","import React from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\nconst BackgroundAnimation = keyframes`\r\n    0% {\r\n\t\tbackground-position: 0% 45%;\r\n\t}\r\n    50% {\r\n\t\tbackground-position: 0% 55%;\r\n\r\n    }\r\n\t100% {\r\n\t\tbackground-position: 0% 45%;\r\n\t}\r\n\r\n`\r\n\r\nconst Container = styled.div`\r\n    background-image: linear-gradient(130deg, #111, #666, #111);\r\n    background-size: 100% 200%;\r\n    background-position: 0% 45%;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    animation: ${BackgroundAnimation} 10s ease infinite;\r\n`\r\n\r\nexport default Container","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst OptionsGrid = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    max-width: 1050px;\r\n    width: 100%;\r\n    justify-items: center;\r\n    color: white;\r\n    grid-column-gap: 145px;\r\n`\r\n\r\nconst Button = styled.button`\r\n    all: unset;\r\n    cursor: pointer;\r\n    border: 1px solid whitesmoke;\r\n    mix-blend-mode: overlay;\r\n    height: 50px;\r\n    width: 170px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-transform: uppercase;\r\n    letter-spacing: 1px;\r\n    position: relative;\r\n    &:before {\r\n        content: '';\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        filter: url('#blur') saturate(2);\r\n        background: inherit;\r\n\r\n    }\r\n`\r\n\r\n\r\nconst Options = () => (\r\n    <OptionsGrid>   \r\n        <Button>ExperiÃªncia</Button>\r\n        <Button>Portfolio</Button>\r\n        <Button>Curiosidades</Button>\r\n    </OptionsGrid>\r\n)\r\n\r\nexport default Options","import React, { Component } from 'react';\nimport styled from 'styled-components'\nimport Name from './components/Name'\nimport Container from './components/Container';\nimport Options from './components/Options';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <Name/>\n        <Options/>\n      </Container >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n        font-family: 'Lato', sans-serif;\n    }\n`\nReactDOM.render(\n    <>\n        <GlobalStyle/>\n        <App />\n    </>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}